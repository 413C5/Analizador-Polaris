//
// Generated by JTB 1.3.2
//

options {
   JAVA_UNICODE_ESCAPE = true;
   STATIC = false;
}

PARSER_BEGIN(ProyectoParcial1)
import syntaxtree.*;
import java.util.Vector;


public class ProyectoParcial1 
{
}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}


PARSER_END(ProyectoParcial1)

TOKEN :
{
   <ENTERO: "int">
   | <FLOTANTE: "float">
   | <STRING: "String">
   | <LECTURA: "readln">
   | <IMPRIMIR: "writeln">
   | <IF: "if">
   | <FOR: "for">
   | <ELSE_IF: "else if">
   | <ELSE: "else">
   | <WHILE: "while">
}

TOKEN :
{
   <ASIGNACION: ["="]>
   | <SUMA: ["+"]>
   | <RESTA: ["-"]>
   | <MULTIPLICACION: ["*"]>
   | <DIVISION: ["/"]>
   | <MODULO: ["%"]>
   | <POTENCIA: "*" "*">
   | <RAIZ_CUADRADA: "%" "%">
}

TOKEN :
{
   <COMPARACION: "=" "=">
   | <MENOR_QUE: ["<"]>
   | <MAYOR_QUE: [">"]>
   | <MENOR_IGUAL: "<" "=">
   | <MAYOR_IGUAL: ">" "=">
}

TOKEN :
{
   <AND: "&" "&">
   | <OR: "|" "|">
   | <NOT: "!" "=">
}

TOKEN :
{
   <PAR_IZQ: ["("]>
   | <PAR_DER: [")"]>
}

TOKEN :
{
   <BR_IZQ: ["["]>
   | <BR_DER: ["]"]>
}

TOKEN :
{
   <CUR_IZQ: ["{"]>
   | <CUR_DER: ["}"]>
}

TOKEN :
{
   <PUNTO: ["."]>
   | <PUNTO_COMA: [";"]>
}

TOKEN :
{
   <VARIABLE: <LETRA> (<LETRA> | <DIGITO> | "_")* (<LETRA> | <DIGITO>)*>
   | <NUM_ENTERO: (<DIGITO>)+>
   | <NUM_FLOTANTE: <NUM_ENTERO> <PUNTO> <NUM_ENTERO>>
   | <#DIGITO: ["0"-"9"]>
   | <#LETRA: ["a"-"z", "A"-"Z"]>
}

TOKEN :
{
   <CADENA: "\"" (~["\n", "\r", "\""])* "\"">
}

SKIP :
{
   " "
   | "\n"
   | "\r"
   | "\t"
}

SPECIAL_TOKEN :
{
   <UNA_LINEA: "#" (~["\n", "\r"])* ("\n" | "\r" | "\n\r")>
}

SPECIAL_TOKEN :
{
   <MULTI_LINEA: "/*"> : DENTRO_DEL_COMENTARIO
}

<DENTRO_DEL_COMENTARIO> MORE :
{
   <~[]>
}

<DENTRO_DEL_COMENTARIO> SPECIAL_TOKEN :
{
   <FIN_MULTI_LINEA: "*/"> : DEFAULT
}

Programa Programa() :
{
   NodeList n0 = new NodeList();
   Sentencia n1;

   
}
{
   (
      n1=Sentencia()
      { n0.addNode(n1); }
   )+
   { n0.nodes.trimToSize(); }
   
   { return new Programa(n0); }
}

Sentencia Sentencia() :
{
   NodeChoice n0;
   NodeSequence n1;
   DeclararVariable n2;
   NodeToken n3;
   Token n4;
   NodeSequence n5;
   SentenciaLeer n6;
   NodeToken n7;
   Token n8;
   NodeSequence n9;
   SentenciaImprimir n10;
   NodeToken n11;
   Token n12;
   NodeSequence n13;
   AsignarValor n14;
   NodeToken n15;
   Token n16;
   SentenciaIf n17;
   SentenciaFor n18;
   SentenciaWhile n19;

   
}
{
   (
      { n1 = new NodeSequence(2); }
      n2=DeclararVariable()
      { n1.addNode(n2); }
      n4=<PUNTO_COMA> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n1.addNode(n3); }
      { n0 = new NodeChoice(n1, 0); }
   |
      { n5 = new NodeSequence(2); }
      n6=SentenciaLeer()
      { n5.addNode(n6); }
      n8=<PUNTO_COMA> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n5.addNode(n7); }
      { n0 = new NodeChoice(n5, 1); }
   |
      { n9 = new NodeSequence(2); }
      n10=SentenciaImprimir()
      { n9.addNode(n10); }
      n12=<PUNTO_COMA> { n11 = JTBToolkit.makeNodeToken(n12); }
      { n9.addNode(n11); }
      { n0 = new NodeChoice(n9, 2); }
   |
      { n13 = new NodeSequence(2); }
      n14=AsignarValor()
      { n13.addNode(n14); }
      n16=<PUNTO_COMA> { n15 = JTBToolkit.makeNodeToken(n16); }
      { n13.addNode(n15); }
      { n0 = new NodeChoice(n13, 3); }
   |
      n17=SentenciaIf()
      { n0 = new NodeChoice(n17, 4); }
   |
      n18=SentenciaFor()
      { n0 = new NodeChoice(n18, 5); }
   |
      n19=SentenciaWhile()
      { n0 = new NodeChoice(n19, 6); }
   )
   
   { return new Sentencia(n0); }
}

DeclararVariable DeclararVariable() :
{
   TipoDato n0;
   NodeToken n1;
   Token n2;

   
}
{
   n0=TipoDato()
   n2=<VARIABLE> { n1 = JTBToolkit.makeNodeToken(n2); }
   
   { return new DeclararVariable(n0,n1); }
}

TipoDato TipoDato() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;

   
}
{
   (
      n2=<ENTERO> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<FLOTANTE> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6=<STRING> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   )
   
   { return new TipoDato(n0); }
}

SentenciaLeer SentenciaLeer() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;

   
}
{
   n1=<LECTURA> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PAR_IZQ> { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=<VARIABLE> { n4 = JTBToolkit.makeNodeToken(n5); }
   n7=<PAR_DER> { n6 = JTBToolkit.makeNodeToken(n7); }
   
   { return new SentenciaLeer(n0,n2,n4,n6); }
}

SentenciaImprimir SentenciaImprimir() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expresion n4;
   NodeToken n5;
   Token n6;

   
}
{
   n1=<IMPRIMIR> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PAR_IZQ> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Expresion()
   n6=<PAR_DER> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new SentenciaImprimir(n0,n2,n4,n5); }
}

AsignarValor AsignarValor() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expresion n4;

   
}
{
   n1=<VARIABLE> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<ASIGNACION> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Expresion()
   
   { return new AsignarValor(n0,n2,n4); }
}

Expresion Expresion() :
{
   ExpresionSimple n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   OperadorComparacion n3;
   ExpresionSimple n4;

   
}
{
   n0=ExpresionSimple()
   (
      { n2 = new NodeSequence(2); }
      n3=OperadorComparacion()
      { n2.addNode(n3); }
      n4=ExpresionSimple()
      { n2.addNode(n4); }
      { n1.addNode(n2); }
   )?
   
   { return new Expresion(n0,n1); }
}

OperadorComparacion OperadorComparacion() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;

   
}
{
   (
      n2=<COMPARACION> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<MENOR_QUE> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6=<MAYOR_QUE> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   |
      n8=<MENOR_IGUAL> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3); }
   |
      n10=<MAYOR_IGUAL> { n9 = JTBToolkit.makeNodeToken(n10); }
      { n0 = new NodeChoice(n9, 4); }
   )
   
   { return new OperadorComparacion(n0); }
}

ExpresionSimple ExpresionSimple() :
{
   Termino n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   OperadorTermino n3;
   Termino n4;

   
}
{
   n0=Termino()
   (
      { n2 = new NodeSequence(2); }
      n3=OperadorTermino()
      { n2.addNode(n3); }
      n4=Termino()
      { n2.addNode(n4); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new ExpresionSimple(n0,n1); }
}

OperadorTermino OperadorTermino() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;

   
}
{
   (
      n2=<SUMA> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<RESTA> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   )
   
   { return new OperadorTermino(n0); }
}

Termino Termino() :
{
   Factor n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   OperadorFactor n3;
   Factor n4;

   
}
{
   n0=Factor()
   (
      { n2 = new NodeSequence(2); }
      n3=OperadorFactor()
      { n2.addNode(n3); }
      n4=Factor()
      { n2.addNode(n4); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new Termino(n0,n1); }
}

OperadorFactor OperadorFactor() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;

   
}
{
   (
      n2=<MULTIPLICACION> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<DIVISION> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6=<MODULO> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   )
   
   { return new OperadorFactor(n0); }
}

Factor Factor() :
{
   Complejo n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   OperadorComplejo n3;
   Complejo n4;

   
}
{
   n0=Complejo()
   (
      { n2 = new NodeSequence(2); }
      n3=OperadorComplejo()
      { n2.addNode(n3); }
      n4=Complejo()
      { n2.addNode(n4); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new Factor(n0,n1); }
}

OperadorComplejo OperadorComplejo() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;

   
}
{
   (
      n2=<POTENCIA> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<RAIZ_CUADRADA> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   )
   
   { return new OperadorComplejo(n0); }
}

Complejo Complejo() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   Expresion n4;
   NodeToken n5;
   Token n6;
   Valor n7;
   NodeToken n8;
   Token n9;

   
}
{
   (
      { n1 = new NodeSequence(3); }
      n3=<PAR_IZQ> { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
      n4=Expresion()
      { n1.addNode(n4); }
      n6=<PAR_DER> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n1.addNode(n5); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n7=Valor()
      { n0 = new NodeChoice(n7, 1); }
   |
      n9=<VARIABLE> { n8 = JTBToolkit.makeNodeToken(n9); }
      { n0 = new NodeChoice(n8, 2); }
   )
   
   { return new Complejo(n0); }
}

Valor Valor() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;

   
}
{
   (
      n2=<NUM_ENTERO> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<NUM_FLOTANTE> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6=<CADENA> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   )
   
   { return new Valor(n0); }
}

OperadorLogico OperadorLogico() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;

   
}
{
   (
      n2=<AND> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<OR> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6=<NOT> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   )
   
   { return new OperadorLogico(n0); }
}

SentenciaIf SentenciaIf() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   ExpresionCondicional n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeList n9 = new NodeList();
   Sentencia n10;
   NodeToken n11;
   Token n12;
   NodeOptional n13 = new NodeOptional();
   ExpresionElse n14;

   
}
{
   n1=<IF> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PAR_IZQ> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=ExpresionCondicional()
   n6=<PAR_DER> { n5 = JTBToolkit.makeNodeToken(n6); }
   n8=<CUR_IZQ> { n7 = JTBToolkit.makeNodeToken(n8); }
   (
      n10=Sentencia()
      { n9.addNode(n10); }
   )+
   { n9.nodes.trimToSize(); }
   n12=<CUR_DER> { n11 = JTBToolkit.makeNodeToken(n12); }
   (
      n14=ExpresionElse()
      { n13.addNode(n14); }
   )?
   
   { return new SentenciaIf(n0,n2,n4,n5,n7,n9,n11,n13); }
}

ExpresionElse ExpresionElse() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeList n4 = new NodeList();
   Sentencia n5;
   NodeToken n6;
   Token n7;

   
}
{
   n1=<ELSE> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<CUR_IZQ> { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      n5=Sentencia()
      { n4.addNode(n5); }
   )+
   { n4.nodes.trimToSize(); }
   n7=<CUR_DER> { n6 = JTBToolkit.makeNodeToken(n7); }
   
   { return new ExpresionElse(n0,n2,n4,n6); }
}

ExpresionCondicional ExpresionCondicional() :
{
   Expresion n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   OperadorLogico n3;
   Expresion n4;

   
}
{
   n0=Expresion()
   (
      { n2 = new NodeSequence(2); }
      n3=OperadorLogico()
      { n2.addNode(n3); }
      n4=Expresion()
      { n2.addNode(n4); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new ExpresionCondicional(n0,n1); }
}

SentenciaFor SentenciaFor() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;
   OperadorComparacion n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;
   OperadorAumento n23;
   NodeToken n24;
   Token n25;
   NodeToken n26;
   Token n27;
   NodeList n28 = new NodeList();
   Sentencia n29;
   NodeToken n30;
   Token n31;

   
}
{
   n1=<FOR> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PAR_IZQ> { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=<ENTERO> { n4 = JTBToolkit.makeNodeToken(n5); }
   n7=<VARIABLE> { n6 = JTBToolkit.makeNodeToken(n7); }
   n9=<ASIGNACION> { n8 = JTBToolkit.makeNodeToken(n9); }
   n11=<NUM_ENTERO> { n10 = JTBToolkit.makeNodeToken(n11); }
   n13=<PUNTO_COMA> { n12 = JTBToolkit.makeNodeToken(n13); }
   n15=<VARIABLE> { n14 = JTBToolkit.makeNodeToken(n15); }
   n16=OperadorComparacion()
   n18=<NUM_ENTERO> { n17 = JTBToolkit.makeNodeToken(n18); }
   n20=<PUNTO_COMA> { n19 = JTBToolkit.makeNodeToken(n20); }
   n22=<VARIABLE> { n21 = JTBToolkit.makeNodeToken(n22); }
   n23=OperadorAumento()
   n25=<PAR_DER> { n24 = JTBToolkit.makeNodeToken(n25); }
   n27=<CUR_IZQ> { n26 = JTBToolkit.makeNodeToken(n27); }
   (
      n29=Sentencia()
      { n28.addNode(n29); }
   )+
   { n28.nodes.trimToSize(); }
   n31=<CUR_DER> { n30 = JTBToolkit.makeNodeToken(n31); }
   
   { return new SentenciaFor(n0,n2,n4,n6,n8,n10,n12,n14,n16,n17,n19,n21,n23,n24,n26,n28,n30); }
}

OperadorAumento OperadorAumento() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;

   
}
{
   (
      n2="++" { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4="--" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   )
   
   { return new OperadorAumento(n0); }
}

SentenciaWhile SentenciaWhile() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   ExpresionCondicional n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeList n9 = new NodeList();
   Sentencia n10;
   NodeToken n11;
   Token n12;

   
}
{
   n1=<WHILE> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PAR_IZQ> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=ExpresionCondicional()
   n6=<PAR_DER> { n5 = JTBToolkit.makeNodeToken(n6); }
   n8=<CUR_IZQ> { n7 = JTBToolkit.makeNodeToken(n8); }
   (
      n10=Sentencia()
      { n9.addNode(n10); }
   )+
   { n9.nodes.trimToSize(); }
   n12=<CUR_DER> { n11 = JTBToolkit.makeNodeToken(n12); }
   
   { return new SentenciaWhile(n0,n2,n4,n5,n7,n9,n11); }
}
