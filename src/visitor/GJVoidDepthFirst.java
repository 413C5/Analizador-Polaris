//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJVoidDepthFirst<A> implements GJVoidVisitor<A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public void visit(NodeList n, A argu) {
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
   }

   public void visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
      }
   }

   public void visit(NodeOptional n, A argu) {
      if ( n.present() )
         n.node.accept(this,argu);
   }

   public void visit(NodeSequence n, A argu) {
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
   }

   public void visit(NodeToken n, A argu) {}

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> ( Sentencia() )+
    */
   public void visit(Programa n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> DeclararVariable() <PUNTO_COMA>
    *       | SentenciaLeer() <PUNTO_COMA>
    *       | SentenciaImprimir() <PUNTO_COMA>
    *       | AsignarValor() <PUNTO_COMA>
    *       | SentenciaIf()
    *       | SentenciaFor()
    *       | SentenciaWhile()
    */
   public void visit(Sentencia n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> TipoDato()
    * f1 -> <VARIABLE>
    */
   public void visit(DeclararVariable n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
   }

   /**
    * f0 -> <ENTERO>
    *       | <FLOTANTE>
    *       | <STRING>
    */
   public void visit(TipoDato n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> <LECTURA>
    * f1 -> <PAR_IZQ>
    * f2 -> <VARIABLE>
    * f3 -> <PAR_DER>
    */
   public void visit(SentenciaLeer n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
   }

   /**
    * f0 -> <IMPRIMIR>
    * f1 -> <PAR_IZQ>
    * f2 -> Expresion()
    * f3 -> <PAR_DER>
    */
   public void visit(SentenciaImprimir n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
   }

   /**
    * f0 -> <VARIABLE>
    * f1 -> <ASIGNACION>
    * f2 -> Expresion()
    */
   public void visit(AsignarValor n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
   }

   /**
    * f0 -> ExpresionSimple()
    * f1 -> ( OperadorComparacion() ExpresionSimple() )?
    */
   public void visit(Expresion n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
   }

   /**
    * f0 -> <COMPARACION>
    *       | <MENOR_QUE>
    *       | <MAYOR_QUE>
    *       | <MENOR_IGUAL>
    *       | <MAYOR_IGUAL>
    */
   public void visit(OperadorComparacion n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> Termino()
    * f1 -> ( OperadorTermino() Termino() )*
    */
   public void visit(ExpresionSimple n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
   }

   /**
    * f0 -> <SUMA>
    *       | <RESTA>
    */
   public void visit(OperadorTermino n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> Factor()
    * f1 -> ( OperadorFactor() Factor() )*
    */
   public void visit(Termino n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
   }

   /**
    * f0 -> <MULTIPLICACION>
    *       | <DIVISION>
    *       | <MODULO>
    */
   public void visit(OperadorFactor n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> Complejo()
    * f1 -> ( OperadorComplejo() Complejo() )*
    */
   public void visit(Factor n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
   }

   /**
    * f0 -> <POTENCIA>
    *       | <RAIZ_CUADRADA>
    */
   public void visit(OperadorComplejo n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> <PAR_IZQ> Expresion() <PAR_DER>
    *       | Valor()
    *       | <VARIABLE>
    */
   public void visit(Complejo n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> <NUM_ENTERO>
    *       | <NUM_FLOTANTE>
    *       | <CADENA>
    */
   public void visit(Valor n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> <AND>
    *       | <OR>
    *       | <NOT>
    */
   public void visit(OperadorLogico n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> <IF>
    * f1 -> <PAR_IZQ>
    * f2 -> ExpresionCondicional()
    * f3 -> <PAR_DER>
    * f4 -> <CUR_IZQ>
    * f5 -> ( Sentencia() )+
    * f6 -> <CUR_DER>
    * f7 -> ( ExpresionElse() )?
    */
   public void visit(SentenciaIf n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
   }

   /**
    * f0 -> <ELSE>
    * f1 -> <CUR_IZQ>
    * f2 -> ( Sentencia() )+
    * f3 -> <CUR_DER>
    */
   public void visit(ExpresionElse n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
   }

   /**
    * f0 -> Expresion()
    * f1 -> ( OperadorLogico() Expresion() )*
    */
   public void visit(ExpresionCondicional n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
   }

   /**
    * f0 -> <FOR>
    * f1 -> <PAR_IZQ>
    * f2 -> <ENTERO>
    * f3 -> <VARIABLE>
    * f4 -> <ASIGNACION>
    * f5 -> <NUM_ENTERO>
    * f6 -> <PUNTO_COMA>
    * f7 -> <VARIABLE>
    * f8 -> OperadorComparacion()
    * f9 -> <NUM_ENTERO>
    * f10 -> <PUNTO_COMA>
    * f11 -> <VARIABLE>
    * f12 -> OperadorAumento()
    * f13 -> <PAR_DER>
    * f14 -> <CUR_IZQ>
    * f15 -> ( Sentencia() )+
    * f16 -> <CUR_DER>
    */
   public void visit(SentenciaFor n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);
   }

   /**
    * f0 -> "++"
    *       | "--"
    */
   public void visit(OperadorAumento n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> <WHILE>
    * f1 -> <PAR_IZQ>
    * f2 -> ExpresionCondicional()
    * f3 -> <PAR_DER>
    * f4 -> <CUR_IZQ>
    * f5 -> ( Sentencia() )+
    * f6 -> <CUR_DER>
    */
   public void visit(SentenciaWhile n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
   }

}
