//
// Generated by JTB 1.3.2
//
package visitor;

import syntaxtree.*;
import java.util.*;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order. Your visitors may extend this class.
 */
public class Visitor1 implements Visitor {

    private int espacios;
    private DefaultTreeModel modeloCreado; //Crea el modelo para despues mandarlo
    private ArrayList<DefaultMutableTreeNode> listaNodos = new ArrayList<DefaultMutableTreeNode>();  //Sirve para recuperar nodos padre

    //Me devuelve en mi modelo para que pueda usarlo
    public DefaultTreeModel getModelo() {
        return modeloCreado;
    }

    public String sangria() {
        String x = "";
        for (int i = 0; i < espacios; i++) {
            x += "   ";
        }
        return x;
    }

    //
    // Auto class visitors--probably don't need to be overridden.
    //
    public void visit(NodeList n) {
        for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
            e.nextElement().accept(this);
        }
    }

    public void visit(NodeListOptional n) {
        if (n.present()) {
            for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
                e.nextElement().accept(this);
            }
        }
    }

    public void visit(NodeOptional n) {
        if (n.present()) {
            n.node.accept(this);
        }
    }

    public void visit(NodeSequence n) {
        for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
            e.nextElement().accept(this);
        }
    }

    public void visit(NodeToken n) {
        //Permite la introduccion de tokens en el modelo independientemente si es nodeSequence o nodeOptional
        DefaultMutableTreeNode nodo = new DefaultMutableTreeNode(n.toString());
        //Nuevo hijo->Padre->Indice
        modeloCreado.insertNodeInto(nodo, listaNodos.get(listaNodos.size() - 1), listaNodos.get(listaNodos.size() - 1).getChildCount());
    }

    //
    // User-generated visitor methods below
    //
    /**
     * f0 -> ( Sentencia() )+
     */
    public void visit(Programa n) {
        //Si la raiz no va primero, no se pueden meter los nodos
        listaNodos.add(new DefaultMutableTreeNode("Programa")); //Crea el nodo raiz, sin este no se pueden añadir mas nodos
        modeloCreado = new DefaultTreeModel(listaNodos.get(listaNodos.size() - 1));//Crea el modelo sobre el cual se añaden nodos

        System.out.println("Programa->");
        espacios++;
        n.f0.accept(this);
        espacios--;

        //Agrega un nodo a mi lista
        listaNodos.remove(listaNodos.size() - 1);

    }

    /**
     * f0 -> DeclararVariable() <PUNTO_COMA>
     * | SentenciaLeer() <PUNTO_COMA>
     * | SentenciaImprimir() <PUNTO_COMA>
     * | AsignarValor() <PUNTO_COMA>
     * | SentenciaIf() | SentenciaFor() | SentenciaWhile()
     */
    public void visit(Sentencia n) {
        //Las 3 siguientes lineas se van a repetir mucho
        //Aumentan la jerarquia y se agrega un nodo
        DefaultMutableTreeNode nodo = new DefaultMutableTreeNode("Sentencia");
        modeloCreado.insertNodeInto(nodo, listaNodos.get(listaNodos.size() - 1), listaNodos.get(listaNodos.size() - 1).getChildCount());
        listaNodos.add(nodo);

        System.out.println(sangria() + "Sentencia->");
        espacios++;
        n.f0.accept(this);
        espacios--;

        //Se resta -1 a la jerarquia para reestablecer la jerarquia y las demas sentencias 
        //se vean bien
        listaNodos.remove(listaNodos.size() - 1);

    }

    /**
     * f0 -> TipoDato() f1 -> <VARIABLE>
     */
    public void visit(DeclararVariable n) {
        DefaultMutableTreeNode nodo = new DefaultMutableTreeNode("Dec. Variable->" + n.f1.toString());
        modeloCreado.insertNodeInto(nodo, listaNodos.get(listaNodos.size() - 1), listaNodos.get(listaNodos.size() - 1).getChildCount());
        listaNodos.add(nodo);

        espacios++;
        n.f0.accept(this);
        espacios--;
        n.f1.accept(this);
        System.out.println(sangria() + "Dec. Variable->" + n.f1.toString());

        listaNodos.remove(listaNodos.size() - 1);
    }

    /**
     * f0 -> <ENTERO>
     * | <FLOTANTE>
     * | <STRING>
     */
    public void visit(TipoDato n) {
        DefaultMutableTreeNode nodo = new DefaultMutableTreeNode("Tipo Dat.->" + n.f0.choice.toString());
        modeloCreado.insertNodeInto(nodo, listaNodos.get(listaNodos.size() - 1), listaNodos.get(listaNodos.size() - 1).getChildCount());
        listaNodos.add(nodo);

        System.out.println(sangria() + "Tipo Dat.->" + n.f0.choice.toString());
        n.f0.accept(this);

        listaNodos.remove(listaNodos.size() - 1);
    }

    /**
     * f0 -> <LECTURA>
     * f1 -> <PAR_IZQ>
     * f2 -> <VARIABLE>
     * f3 -> <PAR_DER>
     */
    public void visit(SentenciaLeer n) {
        DefaultMutableTreeNode nodo = new DefaultMutableTreeNode("Leer->" + n.f2.toString());
        modeloCreado.insertNodeInto(nodo, listaNodos.get(listaNodos.size() - 1), listaNodos.get(listaNodos.size() - 1).getChildCount());
        listaNodos.add(nodo);

        System.out.println(sangria() + "Leer->" + n.f2.toString());
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        n.f3.accept(this);

        listaNodos.remove(listaNodos.size() - 1);
    }

    /**
     * f0 -> <IMPRIMIR>
     * f1 -> <PAR_IZQ>
     * f2 -> Expresion() f3 -> <PAR_DER>
     */
    public void visit(SentenciaImprimir n) {
        DefaultMutableTreeNode nodo = new DefaultMutableTreeNode("Escribir->");
        modeloCreado.insertNodeInto(nodo, listaNodos.get(listaNodos.size() - 1), listaNodos.get(listaNodos.size() - 1).getChildCount());
        listaNodos.add(nodo);

        System.out.println(sangria() + "Escribir->");
        n.f0.accept(this);
        n.f1.accept(this);
        espacios++;
        n.f2.accept(this);
        espacios--;
        n.f3.accept(this);

        listaNodos.remove(listaNodos.size() - 1);
    }

    /**
     * f0 -> <VARIABLE>
     * f1 -> <ASIGNACION>
     * f2 -> Expresion()
     */
    public void visit(AsignarValor n) {
        DefaultMutableTreeNode nodo = new DefaultMutableTreeNode("Asignar Val.->" + n.f0.toString());
        modeloCreado.insertNodeInto(nodo, listaNodos.get(listaNodos.size() - 1), listaNodos.get(listaNodos.size() - 1).getChildCount());
        listaNodos.add(nodo);

        System.out.println(sangria() + "Asignar Val.->" + n.f0.toString());
        n.f0.accept(this);
        n.f1.accept(this);
        espacios++;
        n.f2.accept(this);
        espacios--;

        listaNodos.remove(listaNodos.size() - 1);
    }

    /**
     * f0 -> ExpresionSimple() f1 -> ( OperadorComparacion() ExpresionSimple()
     * )?
     */
    public void visit(Expresion n) {
        DefaultMutableTreeNode nodo = new DefaultMutableTreeNode("Expresion->");
        modeloCreado.insertNodeInto(nodo, listaNodos.get(listaNodos.size() - 1), listaNodos.get(listaNodos.size() - 1).getChildCount());
        listaNodos.add(nodo);

        System.out.println(sangria() + "Expresion->");
        espacios++;
        n.f0.accept(this);
        n.f1.accept(this);
        espacios--;

        listaNodos.remove(listaNodos.size() - 1);
    }

    /**
     * f0 -> <COMPARACION>
     * | <MENOR_QUE>
     * | <MAYOR_QUE>
     * | <MENOR_IGUAL>
     * | <MAYOR_IGUAL>
     */
    public void visit(OperadorComparacion n) {
        DefaultMutableTreeNode nodo = new DefaultMutableTreeNode("Op. Comparacion->" + n.f0.choice.toString());
        modeloCreado.insertNodeInto(nodo, listaNodos.get(listaNodos.size() - 1), listaNodos.get(listaNodos.size() - 1).getChildCount());
        listaNodos.add(nodo);

        System.out.println(sangria() + "Op. Comparacion->" + n.f0.choice.toString());
        n.f0.accept(this);

        listaNodos.remove(listaNodos.size() - 1);
    }

    /**
     * f0 -> Termino() f1 -> ( OperadorTermino() Termino() )*
     */
    public void visit(ExpresionSimple n) {
        DefaultMutableTreeNode nodo = new DefaultMutableTreeNode("Exp. Simple->");
        modeloCreado.insertNodeInto(nodo, listaNodos.get(listaNodos.size() - 1), listaNodos.get(listaNodos.size() - 1).getChildCount());
        listaNodos.add(nodo);

        System.out.println(sangria() + "Exp. Simple->");
        espacios++;
        n.f0.accept(this);
        n.f1.accept(this);
        espacios--;

        listaNodos.remove(listaNodos.size() - 1);
    }

    /**
     * f0 -> <SUMA>
     * | <RESTA>
     */
    //CASO EMERGENCIA, DESCOMENTAR EL LISTA NODOS ADD Y REMOVE
    public void visit(OperadorTermino n) {
        DefaultMutableTreeNode nodo = new DefaultMutableTreeNode("Op. Termino->" + n.f0.choice.toString());
        modeloCreado.insertNodeInto(nodo, listaNodos.get(listaNodos.size() - 1), listaNodos.get(listaNodos.size() - 1).getChildCount());
        listaNodos.add(nodo);

        System.out.println(sangria() + "Op. Termino->" + n.f0.choice.toString());
        n.f0.accept(this);

        //listaNodos.add(nodo);
        //listaNodos.remove(listaNodos.size() - 1);
        listaNodos.remove(listaNodos.size() - 1);
    }

    /**
     * f0 -> Factor() f1 -> ( OperadorFactor() Factor() )*
     */
    public void visit(Termino n) {
        DefaultMutableTreeNode nodo = new DefaultMutableTreeNode("Termino->");
        modeloCreado.insertNodeInto(nodo, listaNodos.get(listaNodos.size() - 1), listaNodos.get(listaNodos.size() - 1).getChildCount());
        listaNodos.add(nodo);

        System.out.println(sangria() + "Termino->");
        espacios++;
        n.f0.accept(this);
        n.f1.accept(this);
        espacios--;

        listaNodos.remove(listaNodos.size() - 1);
    }

    /**
     * f0 -> <MULTIPLICACION>
     * | <DIVISION>
     * | <MODULO>
     */
    public void visit(OperadorFactor n) {
        DefaultMutableTreeNode nodo = new DefaultMutableTreeNode("Op. Factor->" + n.f0.choice.toString());
        modeloCreado.insertNodeInto(nodo, listaNodos.get(listaNodos.size() - 1), listaNodos.get(listaNodos.size() - 1).getChildCount());
        listaNodos.add(nodo);

        System.out.println(sangria() + "Op. Factor->" + n.f0.choice.toString());
        n.f0.accept(this);

        listaNodos.remove(listaNodos.size() - 1);
    }

    /**
     * f0 -> Complejo() f1 -> ( OperadorComplejo() Complejo() )*
     */
    public void visit(Factor n) {
        DefaultMutableTreeNode nodo = new DefaultMutableTreeNode("Factor->");
        modeloCreado.insertNodeInto(nodo, listaNodos.get(listaNodos.size() - 1), listaNodos.get(listaNodos.size() - 1).getChildCount());
        listaNodos.add(nodo);

        System.out.println(sangria() + "Factor->");
        espacios++;
        n.f0.accept(this);
        n.f1.accept(this);
        espacios--;

        listaNodos.remove(listaNodos.size() - 1);
    }

    /**
     * f0 -> <POTENCIA>
     * | <RAIZ_CUADRADA>
     */
    public void visit(OperadorComplejo n) {
        DefaultMutableTreeNode nodo = new DefaultMutableTreeNode("Op. Complejo->" + n.f0.choice.toString());
        modeloCreado.insertNodeInto(nodo, listaNodos.get(listaNodos.size() - 1), listaNodos.get(listaNodos.size() - 1).getChildCount());
        listaNodos.add(nodo);

        System.out.println(sangria() + "Op. Complejo->" + n.f0.choice.toString());
        n.f0.accept(this);

        listaNodos.remove(listaNodos.size() - 1);
    }

    /**
     * f0 -> <PAR_IZQ> Expresion() <PAR_DER>
     * | Valor() | <VARIABLE>
     */
    public void visit(Complejo n) {
        switch (n.f0.which) {
            case 0:
                DefaultMutableTreeNode nodo3 = new DefaultMutableTreeNode("Complejo->");
                modeloCreado.insertNodeInto(nodo3, listaNodos.get(listaNodos.size() - 1), listaNodos.get(listaNodos.size() - 1).getChildCount());
                listaNodos.add(nodo3);

                System.out.println(sangria() + "Complejo->");
                espacios++;
                n.f0.accept(this);
                espacios--;

                listaNodos.remove(listaNodos.size() - 1);
                break;
            case 1:
                DefaultMutableTreeNode nodo2 = new DefaultMutableTreeNode("Complejo->");
                modeloCreado.insertNodeInto(nodo2, listaNodos.get(listaNodos.size() - 1), listaNodos.get(listaNodos.size() - 1).getChildCount());
                listaNodos.add(nodo2);

                System.out.println(sangria() + "Complejo->");
                espacios++;
                n.f0.accept(this);
                espacios--;

                listaNodos.remove(listaNodos.size() - 1);
                break;
            case 2:
                DefaultMutableTreeNode nodo = new DefaultMutableTreeNode("Complejo->" + n.f0.choice.toString());
                modeloCreado.insertNodeInto(nodo, listaNodos.get(listaNodos.size() - 1), listaNodos.get(listaNodos.size() - 1).getChildCount());
                listaNodos.add(nodo);

                System.out.println(sangria() + "Complejo->" + n.f0.choice.toString());

                listaNodos.remove(listaNodos.size() - 1);
                break;
            default:
                throw new AssertionError();
        }
    }

    /**
     * f0 -> <NUM_ENTERO>
     * | <NUM_FLOTANTE>
     * | <CADENA>
     */
    public void visit(Valor n) {
        DefaultMutableTreeNode nodo = new DefaultMutableTreeNode("Valor->" + n.f0.choice.toString());
        modeloCreado.insertNodeInto(nodo, listaNodos.get(listaNodos.size() - 1), listaNodos.get(listaNodos.size() - 1).getChildCount());
        listaNodos.add(nodo);

        System.out.println(sangria() + "Valor->" + n.f0.choice.toString());

        listaNodos.remove(listaNodos.size() - 1);

    }

    /**
     * f0 -> <AND>
     * | <OR>
     * | <NOT>
     */
    public void visit(OperadorLogico n) {
        DefaultMutableTreeNode nodo = new DefaultMutableTreeNode("Op. Logico->" + n.f0.choice.toString());
        modeloCreado.insertNodeInto(nodo, listaNodos.get(listaNodos.size() - 1), listaNodos.get(listaNodos.size() - 1).getChildCount());
        listaNodos.add(nodo);

        System.out.println(sangria() + "Op. Logico->" + n.f0.choice.toString());
        n.f0.accept(this);

        listaNodos.remove(listaNodos.size() - 1);
    }

    /**
     * f0 -> <IF>
     * f1 -> <PAR_IZQ>
     * f2 -> ExpresionCondicional() f3 -> <PAR_DER>
     * f4 -> <CUR_IZQ>
     * f5 -> ( Sentencia() )+ f6 -> <CUR_DER>
     * f7 -> ( ExpresionElse() )?
     */
    public void visit(SentenciaIf n) {
        DefaultMutableTreeNode nodo = new DefaultMutableTreeNode("If->");
        modeloCreado.insertNodeInto(nodo, listaNodos.get(listaNodos.size() - 1), listaNodos.get(listaNodos.size() - 1).getChildCount());
        listaNodos.add(nodo);

        System.out.println(sangria() + "If->");
        n.f0.accept(this);
        n.f1.accept(this);
        espacios++;
        n.f2.accept(this);
        espacios--;
        n.f3.accept(this);
        n.f4.accept(this);
        espacios++;
        n.f5.accept(this);
        espacios--;
        n.f6.accept(this);
        espacios++;
        n.f7.accept(this);
        espacios--;
        
        listaNodos.remove(listaNodos.size() - 1);
    }

    /**
     * f0 -> <ELSE>
     * f1 -> <CUR_IZQ>
     * f2 -> ( Sentencia() )+ f3 -> <CUR_DER>
     */
    public void visit(ExpresionElse n) {
        DefaultMutableTreeNode nodo = new DefaultMutableTreeNode("Else->");
        modeloCreado.insertNodeInto(nodo, listaNodos.get(listaNodos.size() - 1), listaNodos.get(listaNodos.size() - 1).getChildCount());
        listaNodos.add(nodo);
        
        System.out.println(sangria() + "Else->");
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        n.f3.accept(this);
        
        listaNodos.remove(listaNodos.size() - 1);
    }

    /**
     * f0 -> Expresion() f1 -> ( OperadorLogico() Expresion() )*
     */
    public void visit(ExpresionCondicional n) {
        DefaultMutableTreeNode nodo = new DefaultMutableTreeNode("Exp. Condicional->");
        modeloCreado.insertNodeInto(nodo, listaNodos.get(listaNodos.size() - 1), listaNodos.get(listaNodos.size() - 1).getChildCount());
        listaNodos.add(nodo);

        System.out.println(sangria() + "Exp. Condicional->");
        espacios++;
        n.f0.accept(this);
        n.f1.accept(this);
        espacios--;

        listaNodos.remove(listaNodos.size() - 1);
    }

    /**
     * f0 -> <FOR>
     * f1 -> <PAR_IZQ>
     * f2 -> <ENTERO>
     * f3 -> <VARIABLE>
     * f4 -> <ASIGNACION>
     * f5 -> <NUM_ENTERO>
     * f6 -> <PUNTO_COMA>
     * f7 -> <VARIABLE>
     * f8 -> OperadorComparacion() f9 -> <NUM_ENTERO>
     * f10 -> <PUNTO_COMA>
     * f11 -> <VARIABLE>
     * f12 -> OperadorAumento() f13 -> <PAR_DER>
     * f14 -> <CUR_IZQ>
     * f15 -> ( Sentencia() )+ f16 -> <CUR_DER>
     */
    public void visit(SentenciaFor n) {
        DefaultMutableTreeNode nodo = new DefaultMutableTreeNode("For->");
        modeloCreado.insertNodeInto(nodo, listaNodos.get(listaNodos.size() - 1), listaNodos.get(listaNodos.size() - 1).getChildCount());
        listaNodos.add(nodo);

        System.out.println(sangria() + "For->");
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        n.f3.accept(this);
        n.f4.accept(this);
        n.f5.accept(this);
        n.f6.accept(this);
        n.f7.accept(this);
        espacios++;
        //System.out.println(sangria() + "Op. Comparacion->"+n.f8.toString());
        n.f8.accept(this);
        espacios--;
        n.f9.accept(this);
        n.f10.accept(this);
        n.f11.accept(this);
        espacios++;
        //System.out.println(sangria() + "Op. Aumento->"+n.f8.toString());
        n.f12.accept(this);
        espacios--;
        n.f13.accept(this);
        n.f14.accept(this);
        espacios++;
        n.f15.accept(this);
        espacios--;
        n.f16.accept(this);

        listaNodos.remove(listaNodos.size() - 1);
    }

    /**
     * f0 -> "++" | "--"
     */
    public void visit(OperadorAumento n) {
        DefaultMutableTreeNode nodo = new DefaultMutableTreeNode("Op. Aumento->" + n.f0.choice.toString());
        modeloCreado.insertNodeInto(nodo, listaNodos.get(listaNodos.size() - 1), listaNodos.get(listaNodos.size() - 1).getChildCount());
        listaNodos.add(nodo);

        System.out.println(sangria() + "Op. Aumento->" + n.f0.choice.toString());
        n.f0.accept(this);

        listaNodos.remove(listaNodos.size() - 1);
    }

    /**
     * f0 -> <WHILE>
     * f1 -> <PAR_IZQ>
     * f2 -> ExpresionCondicional() f3 -> <PAR_DER>
     * f4 -> <CUR_IZQ>
     * f5 -> ( Sentencia() )+ f6 -> <CUR_DER>
     */
    public void visit(SentenciaWhile n) {
        DefaultMutableTreeNode nodo = new DefaultMutableTreeNode("While->");
        modeloCreado.insertNodeInto(nodo, listaNodos.get(listaNodos.size() - 1), listaNodos.get(listaNodos.size() - 1).getChildCount());
        listaNodos.add(nodo);

        System.out.println(sangria() + "While->");
        n.f0.accept(this);
        n.f1.accept(this);
        espacios++;
        n.f2.accept(this);
        espacios--;
        n.f3.accept(this);
        n.f4.accept(this);
        espacios++;
        n.f5.accept(this);
        espacios--;
        n.f6.accept(this);

        listaNodos.remove(listaNodos.size() - 1);
    }

}
